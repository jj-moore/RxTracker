// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RxTracker.Data;

namespace RxTracker.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190607210522_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RxTracker.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(256);

                    b.Property<string>("Hospital")
                        .HasMaxLength(80);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("DoctorId");

                    b.HasIndex("UserId");

                    b.ToTable("Doctor");

                    b.HasData(
                        new
                        {
                            DoctorId = 1,
                            Address = "East Ann Arbor",
                            Hospital = "University Hospital",
                            Name = "Bob Pharma",
                            UserId = "d87b2a7a-502f-43a0-a269-4d8968d5fa6e"
                        },
                        new
                        {
                            DoctorId = 2,
                            Address = "Traverse City, MI",
                            Hospital = "VA Hospital",
                            Name = "Mary Cutz",
                            UserId = "d87b2a7a-502f-43a0-a269-4d8968d5fa6e"
                        },
                        new
                        {
                            DoctorId = 3,
                            Address = "Hell, MI",
                            Name = "Dr. Feelgood",
                            UserId = "d87b2a7a-502f-43a0-a269-4d8968d5fa6e"
                        },
                        new
                        {
                            DoctorId = 4,
                            Address = "Sirius Beta",
                            Name = "Douglas Adams",
                            UserId = "d87b2a7a-502f-43a0-a269-4d8968d5fa6e"
                        });
                });

            modelBuilder.Entity("RxTracker.Models.Drug", b =>
                {
                    b.Property<int>("DrugId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GenericForId");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(80);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<string>("TradeName")
                        .HasMaxLength(80);

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("DrugId");

                    b.HasIndex("GenericForId");

                    b.HasIndex("UserId");

                    b.ToTable("Drug");

                    b.HasData(
                        new
                        {
                            DrugId = 1,
                            Manufacturer = "Pfizer",
                            Name = "Atorvastatin",
                            TradeName = "Lipitor",
                            UserId = "d87b2a7a-502f-43a0-a269-4d8968d5fa6e"
                        },
                        new
                        {
                            DrugId = 2,
                            GenericForId = 1,
                            Name = "Atorvastatin",
                            UserId = "d87b2a7a-502f-43a0-a269-4d8968d5fa6e"
                        },
                        new
                        {
                            DrugId = 3,
                            Manufacturer = "Reckitt Benckiser",
                            Name = "Buprenorphine/naloxone",
                            TradeName = "Suboxone",
                            UserId = "d87b2a7a-502f-43a0-a269-4d8968d5fa6e"
                        },
                        new
                        {
                            DrugId = 4,
                            Manufacturer = "Pfizer",
                            Name = "Pregabalin",
                            TradeName = "Lyrica",
                            UserId = "d87b2a7a-502f-43a0-a269-4d8968d5fa6e"
                        },
                        new
                        {
                            DrugId = 5,
                            GenericForId = 3,
                            Name = "Buprenorphine/naloxone",
                            UserId = "d87b2a7a-502f-43a0-a269-4d8968d5fa6e"
                        },
                        new
                        {
                            DrugId = 6,
                            Name = "Methylphenidate",
                            TradeName = "Ritalin",
                            UserId = "d87b2a7a-502f-43a0-a269-4d8968d5fa6e"
                        },
                        new
                        {
                            DrugId = 7,
                            GenericForId = 6,
                            Name = "Methylphenidate",
                            UserId = "d87b2a7a-502f-43a0-a269-4d8968d5fa6e"
                        },
                        new
                        {
                            DrugId = 8,
                            Name = "Beclomethasone",
                            TradeName = "QVAR",
                            UserId = "d87b2a7a-502f-43a0-a269-4d8968d5fa6e"
                        },
                        new
                        {
                            DrugId = 9,
                            Name = "Estradiol",
                            UserId = "d87b2a7a-502f-43a0-a269-4d8968d5fa6e"
                        },
                        new
                        {
                            DrugId = 10,
                            Name = "Fluoxetine",
                            TradeName = "Prozac",
                            UserId = "d87b2a7a-502f-43a0-a269-4d8968d5fa6e"
                        },
                        new
                        {
                            DrugId = 11,
                            GenericForId = 10,
                            Name = "Fluoxetine",
                            UserId = "d87b2a7a-502f-43a0-a269-4d8968d5fa6e"
                        },
                        new
                        {
                            DrugId = 12,
                            Name = "Lisonopril HCL",
                            UserId = "d87b2a7a-502f-43a0-a269-4d8968d5fa6e"
                        },
                        new
                        {
                            DrugId = 13,
                            Name = "Trazodone",
                            UserId = "d87b2a7a-502f-43a0-a269-4d8968d5fa6e"
                        },
                        new
                        {
                            DrugId = 14,
                            Name = "Oxybutynin",
                            UserId = "d87b2a7a-502f-43a0-a269-4d8968d5fa6e"
                        });
                });

            modelBuilder.Entity("RxTracker.Models.MyUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime?>("DOB");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "d87b2a7a-502f-43a0-a269-4d8968d5fa6e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "69f5077e-a9c0-434e-ae4f-850d1a7ca0c4",
                            DOB = new DateTime(1972, 6, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jane@example.com",
                            EmailConfirmed = false,
                            FirstName = "Jane",
                            LastName = "Doe",
                            LockoutEnabled = true,
                            NormalizedEmail = "JANE@EXAMPLE.COM",
                            NormalizedUserName = "JANE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGcbL7MWdr8mmQvsyvaNVv2fpfFE0mRDYhYQvz75VZ635iR21ypR4pBHji13av/Vyg==",
                            PhoneNumber = "734-555-1234",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "80ee975d-032d-430f-a4d3-0bbac5dbda63",
                            TwoFactorEnabled = false,
                            UserName = "jane@example.com"
                        });
                });

            modelBuilder.Entity("RxTracker.Models.Pharmacy", b =>
                {
                    b.Property<int>("PharmacyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("PharmacyId");

                    b.HasIndex("UserId");

                    b.ToTable("Pharmacy");

                    b.HasData(
                        new
                        {
                            PharmacyId = 1,
                            Address = "Carpenter Rd, Ypsilanti",
                            Name = "Meijer",
                            UserId = "d87b2a7a-502f-43a0-a269-4d8968d5fa6e"
                        },
                        new
                        {
                            PharmacyId = 2,
                            Address = "Mail Order",
                            Name = "CVS Caremark",
                            UserId = "d87b2a7a-502f-43a0-a269-4d8968d5fa6e"
                        },
                        new
                        {
                            PharmacyId = 3,
                            Address = "Whittaker Rd, Ypsilanti, MI",
                            Name = "CVS",
                            UserId = "d87b2a7a-502f-43a0-a269-4d8968d5fa6e"
                        },
                        new
                        {
                            PharmacyId = 4,
                            Address = "Whittaker Rd, Ypsilanti, MI",
                            Name = "Kroger",
                            UserId = "d87b2a7a-502f-43a0-a269-4d8968d5fa6e"
                        },
                        new
                        {
                            PharmacyId = 5,
                            Address = "Ellwworth Rd, Pittsfield, MI",
                            Name = "Costco",
                            UserId = "d87b2a7a-502f-43a0-a269-4d8968d5fa6e"
                        });
                });

            modelBuilder.Entity("RxTracker.Models.Prescription", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<int>("DoctorId");

                    b.Property<string>("Dosage")
                        .HasMaxLength(80);

                    b.Property<int>("DrugId");

                    b.Property<string>("Form")
                        .HasMaxLength(80);

                    b.Property<string>("Regimen")
                        .HasMaxLength(80);

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("PrescriptionId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("DrugId");

                    b.HasIndex("UserId");

                    b.ToTable("Prescription");

                    b.HasData(
                        new
                        {
                            PrescriptionId = 1,
                            Active = (byte)0,
                            DoctorId = 1,
                            Dosage = "25mg",
                            DrugId = 1,
                            Form = "Tablet",
                            Regimen = "Once daily",
                            UserId = "d87b2a7a-502f-43a0-a269-4d8968d5fa6e"
                        },
                        new
                        {
                            PrescriptionId = 16,
                            Active = (byte)1,
                            DoctorId = 1,
                            Dosage = "20mg",
                            DrugId = 2,
                            Form = "Tablet",
                            Regimen = "Once daily",
                            UserId = "d87b2a7a-502f-43a0-a269-4d8968d5fa6e"
                        },
                        new
                        {
                            PrescriptionId = 2,
                            Active = (byte)1,
                            DoctorId = 3,
                            Dosage = "60mg",
                            DrugId = 4,
                            Form = "Tablet",
                            Regimen = "Once daily",
                            UserId = "d87b2a7a-502f-43a0-a269-4d8968d5fa6e"
                        },
                        new
                        {
                            PrescriptionId = 3,
                            Active = (byte)0,
                            DoctorId = 3,
                            Dosage = "15mg/20mg",
                            DrugId = 3,
                            Form = "Sublingual Strip",
                            Regimen = "Half strip, twice daily",
                            UserId = "d87b2a7a-502f-43a0-a269-4d8968d5fa6e"
                        },
                        new
                        {
                            PrescriptionId = 15,
                            Active = (byte)1,
                            DoctorId = 3,
                            Dosage = "10mg/15mg",
                            DrugId = 5,
                            Form = "Tablet",
                            Regimen = "Two tablets daily, morning and evening",
                            UserId = "d87b2a7a-502f-43a0-a269-4d8968d5fa6e"
                        },
                        new
                        {
                            PrescriptionId = 4,
                            Active = (byte)1,
                            DoctorId = 2,
                            Dosage = "100mg",
                            DrugId = 2,
                            Form = "Tablet",
                            Regimen = "Once daily",
                            UserId = "d87b2a7a-502f-43a0-a269-4d8968d5fa6e"
                        },
                        new
                        {
                            PrescriptionId = 6,
                            Active = (byte)0,
                            DoctorId = 4,
                            Dosage = "60mcg",
                            DrugId = 8,
                            Form = "Inhaler",
                            Regimen = "Two puffs, twice daily or as needed",
                            UserId = "d87b2a7a-502f-43a0-a269-4d8968d5fa6e"
                        },
                        new
                        {
                            PrescriptionId = 7,
                            Active = (byte)1,
                            DoctorId = 2,
                            Dosage = "0.1mg",
                            DrugId = 9,
                            Form = "Patch",
                            Regimen = "Once weekly",
                            UserId = "d87b2a7a-502f-43a0-a269-4d8968d5fa6e"
                        },
                        new
                        {
                            PrescriptionId = 8,
                            Active = (byte)0,
                            DoctorId = 3,
                            Dosage = "25mg",
                            DrugId = 11,
                            Form = "Tablet",
                            Regimen = "Once daily",
                            UserId = "d87b2a7a-502f-43a0-a269-4d8968d5fa6e"
                        },
                        new
                        {
                            PrescriptionId = 14,
                            Active = (byte)1,
                            DoctorId = 3,
                            Dosage = "50mg",
                            DrugId = 11,
                            Form = "Tablet",
                            Regimen = "Once daily",
                            UserId = "d87b2a7a-502f-43a0-a269-4d8968d5fa6e"
                        },
                        new
                        {
                            PrescriptionId = 9,
                            Active = (byte)1,
                            DoctorId = 1,
                            Dosage = "10-12.5mg",
                            DrugId = 12,
                            Form = "Tablet",
                            Regimen = "Once daily",
                            UserId = "d87b2a7a-502f-43a0-a269-4d8968d5fa6e"
                        },
                        new
                        {
                            PrescriptionId = 10,
                            Active = (byte)1,
                            DoctorId = 1,
                            Dosage = "100mg",
                            DrugId = 13,
                            Form = "Capsule",
                            Regimen = "Once daily",
                            UserId = "d87b2a7a-502f-43a0-a269-4d8968d5fa6e"
                        },
                        new
                        {
                            PrescriptionId = 12,
                            Active = (byte)1,
                            DoctorId = 3,
                            Dosage = "100mg",
                            DrugId = 7,
                            Form = "Capsule",
                            Regimen = "Once daily",
                            UserId = "d87b2a7a-502f-43a0-a269-4d8968d5fa6e"
                        },
                        new
                        {
                            PrescriptionId = 13,
                            Active = (byte)1,
                            DoctorId = 3,
                            Dosage = "100mg",
                            DrugId = 10,
                            Form = "Capsule",
                            Regimen = "Once daily",
                            UserId = "d87b2a7a-502f-43a0-a269-4d8968d5fa6e"
                        });
                });

            modelBuilder.Entity("RxTracker.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("DateFilled")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<string>("DiscountUsed")
                        .HasMaxLength(80);

                    b.Property<string>("InsuranceUsed")
                        .HasMaxLength(80);

                    b.Property<int>("PharmacyId");

                    b.Property<int>("PrescriptionId");

                    b.HasKey("TransactionId");

                    b.HasIndex("PharmacyId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("Transaction");

                    b.HasData(
                        new
                        {
                            TransactionId = 1,
                            Cost = 20m,
                            DateFilled = new DateTime(2018, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsuranceUsed = "BCBS",
                            PharmacyId = 2,
                            PrescriptionId = 1
                        },
                        new
                        {
                            TransactionId = 2,
                            Cost = 20m,
                            DateFilled = new DateTime(2019, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsuranceUsed = "BCBS",
                            PharmacyId = 2,
                            PrescriptionId = 1
                        },
                        new
                        {
                            TransactionId = 3,
                            Cost = 20m,
                            DateFilled = new DateTime(2019, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsuranceUsed = "BCBS",
                            PharmacyId = 2,
                            PrescriptionId = 1
                        },
                        new
                        {
                            TransactionId = 4,
                            Cost = 0m,
                            DateFilled = new DateTime(2019, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountUsed = "Free at Meijer",
                            InsuranceUsed = "None",
                            PharmacyId = 1,
                            PrescriptionId = 16
                        },
                        new
                        {
                            TransactionId = 5,
                            Cost = 0m,
                            DateFilled = new DateTime(2019, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountUsed = "Free at Meijer",
                            InsuranceUsed = "None",
                            PharmacyId = 1,
                            PrescriptionId = 16
                        },
                        new
                        {
                            TransactionId = 6,
                            Cost = 78.32m,
                            DateFilled = new DateTime(2019, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsuranceUsed = "BCBS",
                            PharmacyId = 4,
                            PrescriptionId = 3
                        },
                        new
                        {
                            TransactionId = 7,
                            Cost = 75.67m,
                            DateFilled = new DateTime(2019, 3, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsuranceUsed = "BCBS",
                            PharmacyId = 4,
                            PrescriptionId = 3
                        },
                        new
                        {
                            TransactionId = 8,
                            Cost = 45.99m,
                            DateFilled = new DateTime(2019, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsuranceUsed = "Molina",
                            PharmacyId = 5,
                            PrescriptionId = 15
                        },
                        new
                        {
                            TransactionId = 9,
                            Cost = 25m,
                            DateFilled = new DateTime(2019, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountUsed = "Manufacturer Coupon",
                            InsuranceUsed = "Molina",
                            PharmacyId = 5,
                            PrescriptionId = 15
                        },
                        new
                        {
                            TransactionId = 10,
                            Cost = 45.08m,
                            DateFilled = new DateTime(2018, 12, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsuranceUsed = "BCBS",
                            PharmacyId = 2,
                            PrescriptionId = 2
                        },
                        new
                        {
                            TransactionId = 11,
                            Cost = 47.32m,
                            DateFilled = new DateTime(2019, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsuranceUsed = "BCBS",
                            PharmacyId = 2,
                            PrescriptionId = 2
                        },
                        new
                        {
                            TransactionId = 12,
                            Cost = 47.32m,
                            DateFilled = new DateTime(2019, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsuranceUsed = "BCBS",
                            PharmacyId = 2,
                            PrescriptionId = 2
                        },
                        new
                        {
                            TransactionId = 13,
                            Cost = 60m,
                            DateFilled = new DateTime(2019, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsuranceUsed = "Molina",
                            PharmacyId = 2,
                            PrescriptionId = 2
                        },
                        new
                        {
                            TransactionId = 14,
                            Cost = 58.50m,
                            DateFilled = new DateTime(2019, 4, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsuranceUsed = "Molina",
                            PharmacyId = 2,
                            PrescriptionId = 2
                        },
                        new
                        {
                            TransactionId = 15,
                            Cost = 3.55m,
                            DateFilled = new DateTime(2018, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsuranceUsed = "BCBS",
                            PharmacyId = 4,
                            PrescriptionId = 12
                        },
                        new
                        {
                            TransactionId = 16,
                            Cost = 2.85m,
                            DateFilled = new DateTime(2019, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsuranceUsed = "BCBS",
                            PharmacyId = 4,
                            PrescriptionId = 12
                        },
                        new
                        {
                            TransactionId = 17,
                            Cost = 3.80m,
                            DateFilled = new DateTime(2019, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsuranceUsed = "Molina",
                            PharmacyId = 4,
                            PrescriptionId = 12
                        },
                        new
                        {
                            TransactionId = 18,
                            Cost = 3.80m,
                            DateFilled = new DateTime(2019, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsuranceUsed = "Molina",
                            PharmacyId = 4,
                            PrescriptionId = 12
                        },
                        new
                        {
                            TransactionId = 19,
                            Cost = 25m,
                            DateFilled = new DateTime(2019, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsuranceUsed = "BCBS",
                            PharmacyId = 3,
                            PrescriptionId = 12
                        },
                        new
                        {
                            TransactionId = 20,
                            Cost = 32.33m,
                            DateFilled = new DateTime(2018, 11, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsuranceUsed = "BCBS",
                            PharmacyId = 3,
                            PrescriptionId = 6
                        },
                        new
                        {
                            TransactionId = 21,
                            Cost = 33.34m,
                            DateFilled = new DateTime(2019, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsuranceUsed = "BCBS",
                            PharmacyId = 3,
                            PrescriptionId = 6
                        },
                        new
                        {
                            TransactionId = 22,
                            Cost = 30.99m,
                            DateFilled = new DateTime(2019, 2, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsuranceUsed = "Molina",
                            PharmacyId = 3,
                            PrescriptionId = 6
                        },
                        new
                        {
                            TransactionId = 23,
                            Cost = 20.99m,
                            DateFilled = new DateTime(2019, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountUsed = "GoodRx",
                            InsuranceUsed = "Molina",
                            PharmacyId = 5,
                            PrescriptionId = 6
                        },
                        new
                        {
                            TransactionId = 24,
                            Cost = 82.69m,
                            DateFilled = new DateTime(2018, 12, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountUsed = "Good Rx",
                            PharmacyId = 4,
                            PrescriptionId = 7
                        },
                        new
                        {
                            TransactionId = 25,
                            Cost = 84.99m,
                            DateFilled = new DateTime(2019, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountUsed = "Good Rx",
                            PharmacyId = 1,
                            PrescriptionId = 7
                        },
                        new
                        {
                            TransactionId = 26,
                            Cost = 1.85m,
                            DateFilled = new DateTime(2018, 12, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsuranceUsed = "BCBS",
                            PharmacyId = 4,
                            PrescriptionId = 8
                        },
                        new
                        {
                            TransactionId = 27,
                            Cost = 1.99m,
                            DateFilled = new DateTime(2019, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsuranceUsed = "BCBS",
                            PharmacyId = 4,
                            PrescriptionId = 8
                        },
                        new
                        {
                            TransactionId = 28,
                            Cost = 2.55m,
                            DateFilled = new DateTime(2019, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountUsed = "BCBS",
                            PharmacyId = 4,
                            PrescriptionId = 14
                        },
                        new
                        {
                            TransactionId = 29,
                            Cost = 2.55m,
                            DateFilled = new DateTime(2019, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsuranceUsed = "BCBS",
                            PharmacyId = 4,
                            PrescriptionId = 14
                        },
                        new
                        {
                            TransactionId = 30,
                            Cost = 2.85m,
                            DateFilled = new DateTime(2019, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsuranceUsed = "Molina",
                            PharmacyId = 4,
                            PrescriptionId = 14
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RxTracker.Models.MyUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RxTracker.Models.MyUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RxTracker.Models.MyUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RxTracker.Models.MyUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RxTracker.Models.Doctor", b =>
                {
                    b.HasOne("RxTracker.Models.MyUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RxTracker.Models.Drug", b =>
                {
                    b.HasOne("RxTracker.Models.Drug", "GenericFor")
                        .WithMany()
                        .HasForeignKey("GenericForId");

                    b.HasOne("RxTracker.Models.MyUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RxTracker.Models.Pharmacy", b =>
                {
                    b.HasOne("RxTracker.Models.MyUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RxTracker.Models.Prescription", b =>
                {
                    b.HasOne("RxTracker.Models.Doctor", "Doctor")
                        .WithMany("Prescriptions")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RxTracker.Models.Drug", "Drug")
                        .WithMany("Prescriptions")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RxTracker.Models.MyUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RxTracker.Models.Transaction", b =>
                {
                    b.HasOne("RxTracker.Models.Pharmacy", "Pharmacy")
                        .WithMany("Transactions")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RxTracker.Models.Prescription", "Prescription")
                        .WithMany("Transactions")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
